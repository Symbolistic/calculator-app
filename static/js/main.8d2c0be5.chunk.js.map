{"version":3,"sources":["App.js","index.js","Calculator.js"],"names":["App","className","Calculator","ReactDOM","render","StrictMode","document","getElementById","inputs","id","value","state","currentInput","output","handleInput","bind","event","input","target","this","setState","isNaN","includes","prevState","some","symbol","slice","endsWith","currOutput","eval","map","key","onClick","React","Component"],"mappings":"oMAYeA,MARf,WACE,OACE,yBAAKC,UAAU,kBACb,kBAACC,EAAA,EAAD,QCHNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,ynCCNpBC,OAAS,CACX,CACIC,GAAI,OACJC,MAAO,KAEX,CACID,GAAI,MACJC,MAAO,KAGX,CACID,GAAI,MACJC,MAAO,KAGX,CACID,GAAI,QACJC,MAAO,KAGX,CACID,GAAI,OACJC,MAAO,KAGX,CACID,GAAI,OACJC,MAAO,KAGX,CACID,GAAI,MACJC,MAAO,KAEX,CACID,GAAI,QACJC,MAAO,KAGX,CACID,GAAI,QACJC,MAAO,KAGX,CACID,GAAI,OACJC,MAAO,KAGX,CACID,GAAI,UACJC,MAAO,KAGX,CACID,GAAI,SACJC,MAAO,KAGX,CACID,GAAI,MACJC,MAAO,KAGX,CACID,GAAI,WACJC,MAAO,KAGX,CACID,GAAI,WACJC,MAAO,KAGX,CACID,GAAI,SACJC,MAAO,KAGX,CACID,GAAI,QACJC,MAAO,UAITR,W,0ZACF,sBAAe,IAAD,qMACV,qBAEKS,MAAQ,CACTH,cACAI,aAAc,IACdC,OAAQ,IAEZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,qLART,E,wOAWFC,OAAQ,IAAD,YACTC,MAAQD,MAAME,OAAOR,MAG3B,GAAc,UAAVO,MAEAE,KAAKC,SAAU,CAACR,aAAc,IAAKC,OAAQ,UAGxC,GAAKQ,MAAMJ,QA0CX,GAAc,MAAVA,MAGFE,KAAKR,MAAMC,aAAaU,SAAS,MAElCH,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcW,EAAUX,aAAeK,MACvCJ,OAAQU,EAAUV,OAASI,eAMpC,GAAI,CAAC,IAAK,IAAK,IAAK,KAAKK,SAASL,OAEjCE,KAAKR,MAAME,OAAOS,SAAS,MAC3BH,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcK,MACdJ,OAAQU,EAAUX,iBAMzBS,MAAMF,KAAKR,MAAMC,cASX,CAAC,IAAK,IAAK,IAAK,KAAKY,MAAK,SAAAC,GAAM,OAAI,OAAKd,MAAMC,eAAiBa,KAGnER,QAAUE,KAAKR,MAAMC,aACrBO,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcK,UAGL,MAAVA,MAEPE,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcW,EAAUX,aAAeK,MACvCJ,OAAQU,EAAUV,OAASI,UAK/BE,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcK,MACdJ,OAAQU,EAAUV,OAAOa,MAAM,GAAG,GAAKT,UAOpC,MAAVA,MACLE,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcW,EAAUX,aACxBC,OAAQU,EAAUV,WAI1BM,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcK,MACdJ,OAAQU,EAAUV,OAAOa,MAAM,GAAG,GAAKT,UA/CnDE,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcK,MACdJ,OAAQU,EAAUV,OAASI,eAkDlC,GAAc,MAAVA,MAEL,GAAI,CAAC,IAAK,IAAK,IAAK,KAAKO,MAAK,SAAAC,GAAM,OAAI,OAAKd,MAAME,OAAOc,SAASF,MAAU,CAEzE,IAAIG,WAAaT,KAAKR,MAAME,OAAOa,MAAM,GAAG,GAExC,CAAC,IAAK,IAAK,IAAK,KAAKF,MAAK,SAAAC,GAAM,OAAIG,WAAWD,SAASF,QACxDG,WAAaA,WAAWF,MAAM,GAAG,GAEjCP,KAAKC,UAAU,SAAAG,WACX,MAAO,CACHX,aAAciB,KAAKD,YACnBf,OAAQe,WAAaX,MAAQY,KAAKD,sBAOzCT,KAAKR,MAAME,OAAOS,SAAS,KAChCH,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcW,EAAUX,aACxBC,OAAQU,EAAUV,WAGG,KAAtBM,KAAKR,MAAME,OAElBM,KAAKC,SAAU,CAACR,aAAc,MAAOC,OAAQ,QAEhB,QAAtBM,KAAKR,MAAME,QAIlBM,KAAKC,UAAU,SAAAG,WACX,MAAO,CACHX,aAAciB,KAAKN,UAAUV,QAC7BA,OAAQU,UAAUV,OAASI,MAAQY,KAAKN,UAAUV,iBA9J9DM,KAAKR,MAAME,OAAOS,SAAS,KAC3BH,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcK,MACdJ,OAAQI,UAMD,MAAVA,OAA6C,MAA5BE,KAAKR,MAAMC,aACjCO,KAAKC,SAAU,CAACR,aAAa,MAGb,MAAVK,OAA6C,MAA5BE,KAAKR,MAAMC,cAO3BS,MAAMF,KAAKR,MAAMC,cANxBO,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcK,MACdJ,OAAQU,EAAUV,OAASI,UAanCE,KAAKC,UAAU,SAAAG,GACX,MAAO,CACHX,aAAcW,EAAUX,aAAeK,MACvCJ,OAAQU,EAAUV,OAASI,Y,+BAmIrC,IAAD,OACL,OACI,kEAAKhB,UAAU,kBACX,kEAAKQ,GAAG,qBACJ,kEAAKA,GAAG,iBAAiBU,KAAKR,MAAME,QACpC,kEAAKJ,GAAG,WAAWU,KAAKR,MAAMC,eAElC,kEAAKH,GAAG,UACHU,KAAKR,MAAMH,OAAOsB,KAAI,YAAkB,IAAhBrB,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MACzB,OACI,qEAAQqB,IAAKtB,EAAIA,GAAIA,EAAIC,MAAOA,EAAOsB,QAAS,EAAKlB,aAAcJ,OAI/E,kEAAKD,GAAG,QAAO,gH,YA1MNwB,6CAAMC,WAgNhBhC,kC","file":"static/js/main.8d2c0be5.chunk.js","sourcesContent":["import React from 'react';\nimport Calculator from './Calculator'\nimport './style.css'\n\nfunction App() {\n  return (\n    <div className=\"grid-container\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react'\r\n\r\nconst inputs = [\r\n    {\r\n        id: 'zero',\r\n        value: '0'\r\n    },\r\n    {\r\n        id: 'one',\r\n        value: '1'\r\n    },\r\n\r\n    {\r\n        id: 'two',\r\n        value: '2'\r\n    },\r\n\r\n    {\r\n        id: 'three',\r\n        value: '3'\r\n    },\r\n\r\n    {\r\n        id: 'four',\r\n        value: '4'\r\n    },\r\n\r\n    {\r\n        id: 'five',\r\n        value: '5'\r\n    },\r\n\r\n    {\r\n        id: 'six',\r\n        value: '6'\r\n    },\r\n    {\r\n        id: 'seven',\r\n        value: '7'\r\n    },\r\n\r\n    {\r\n        id: 'eight',\r\n        value: '8'\r\n    },\r\n\r\n    {\r\n        id: 'nine',\r\n        value: '9'\r\n    },\r\n\r\n    {\r\n        id: 'decimal',\r\n        value: '.'\r\n    },\r\n\r\n    {\r\n        id: 'equals',\r\n        value: '='\r\n    },\r\n\r\n    {\r\n        id: 'add',\r\n        value: '+'\r\n    },\r\n\r\n    {\r\n        id: 'subtract',\r\n        value: '-'\r\n    },\r\n\r\n    {\r\n        id: 'multiply',\r\n        value: '*'\r\n    },\r\n\r\n    {\r\n        id: 'divide',\r\n        value: '/'\r\n    },\r\n      \r\n    {\r\n        id: 'clear',\r\n        value: 'clear'\r\n    }\r\n]\r\n\r\nclass Calculator extends React.Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            inputs,\r\n            currentInput: '0',\r\n            output: ''\r\n        }\r\n        this.handleInput = this.handleInput.bind(this);\r\n    }\r\n\r\n    handleInput(event) {\r\n        const input = event.target.value;\r\n\r\n            // If input is 'CLEAR' do this\r\n        if (input === \"clear\") {\r\n\r\n            this.setState ({currentInput: '0', output: ''})\r\n        \r\n            // If input IS a number, start these conditionals\r\n        } else if (!isNaN(input)) {\r\n\r\n            if (this.state.output.includes('=')){\r\n                this.setState (prevState => {\r\n                    return {\r\n                        currentInput: input,\r\n                        output: input\r\n                    }\r\n                })\r\n            }\r\n            \r\n            // If selected input is 0 and CURRENT input is also already 0...\r\n            else if (input === '0' && this.state.currentInput === '0'){\r\n                this.setState ({currentInput:'0'}) // Keep current input as 0.\r\n\r\n             // If selected input ISN'T 0 and CURRENT input IS 0...\r\n            } else if(input !== '0' && this.state.currentInput === '0') {\r\n                this.setState (prevState => {\r\n                    return {\r\n                        currentInput: input,  // Replace current 0 input with the new selected number\r\n                        output: prevState.output + input\r\n                    }\r\n                })\r\n            } else if (isNaN(this.state.currentInput)) { // If CURRENT DISPLAYED INPUT ISN'T A NUMBER, ERASE THAT HOE!\r\n                                                         // REPLACE HER WITH A NEW ONE, new, being a number :)\r\n                this.setState (prevState => {\r\n                    return {\r\n                        currentInput: input,  \r\n                        output: prevState.output + input\r\n                    }\r\n                })\r\n\r\n            } else { // Else, if input is a number and current input is not 0, just append the selected input\r\n                this.setState (prevState => {\r\n                    return {\r\n                        currentInput: prevState.currentInput + input, \r\n                        output: prevState.output + input\r\n                    }\r\n                })\r\n            }\r\n\r\n            // If input is a decimal\r\n        } else if (input === '.') {\r\n            \r\n            // If there isn't already a decimal, run this\r\n            if (!this.state.currentInput.includes('.')) {\r\n                \r\n                this.setState (prevState => {\r\n                    return {\r\n                        currentInput: prevState.currentInput + input, \r\n                        output: prevState.output + input\r\n                    }\r\n                })\r\n            }\r\n\r\n            // If input is an OPERATOR\r\n        } else if (['+', '-', '*', '/'].includes(input)) {\r\n\r\n            if (this.state.output.includes('=')){\r\n                this.setState (prevState => {\r\n                    return {\r\n                        currentInput: input,\r\n                        output: prevState.currentInput\r\n                    }\r\n                })\r\n            }\r\n\r\n            // If CURRENT input is a number, use the NEWLY CLICKED input and update CURRENT input\r\n            if (!isNaN(this.state.currentInput)) {\r\n\r\n                this.setState (prevState => {\r\n                    return {\r\n                        currentInput: input, \r\n                        output: prevState.output + input\r\n                    }\r\n                })\r\n                // This checks currentInput to see if it has ONLY 0 - 1 other Operators in it currently\r\n            } else if (['+', '-', '*', '/'].some(symbol => this.state.currentInput === symbol)) {\r\n\r\n                    // This avoids duplicate operators, so no ** or -- or ++ or //, this makes sure its only mixed OPERATORS\r\n                if (input === this.state.currentInput) {\r\n                    this.setState (prevState => {\r\n                        return {\r\n                            currentInput: input\r\n                        }\r\n                    })\r\n                } else if (input === '-') { // Now that we avoid duplicate operators, if the new operator is -, append it\r\n\r\n                    this.setState (prevState => {\r\n                        return {\r\n                            currentInput: prevState.currentInput + input,\r\n                            output: prevState.output + input\r\n                        }\r\n                    })\r\n\r\n                } else if (input === '*' || '/' || '+') { // If its anything else, basically we override it with the old operator\r\n                        this.setState (prevState => {\r\n                            return {\r\n                                currentInput: input,\r\n                                output: prevState.output.slice(0,-1) + input\r\n                            }\r\n                        })\r\n                    }\r\n                } // END OF THIS NESTED IF STATEMENT\r\n                 // Usually if we have more than 2 operators currently its ending with a '-', if we click '-' again, this overrides\r\n                 // the old '-'\r\n                else if (input === '-') {\r\n                    this.setState (prevState => {\r\n                        return {\r\n                            currentInput: prevState.currentInput,\r\n                            output: prevState.output\r\n                        }\r\n                    })\r\n                } else if (input === '+' || '/' || '*') { // If its more than 2 operators and any of these are picked\r\n                    this.setState (prevState => {         // just override all operators and use the newly picked operator\r\n                        return {\r\n                            currentInput: input,\r\n                            output: prevState.output.slice(0,-2) + input\r\n                        }\r\n                    })\r\n                }\r\n            } // END OF OPERATOR NESTED STATEMENTS.....THANK GOD! \r\n\r\n            else if (input === '=')  {\r\n\r\n                if (['+', '-', '*', '/'].some(symbol => this.state.output.endsWith(symbol))) { \r\n\r\n                    let currOutput = this.state.output.slice(0,-1) // I made this because I didn't want to mutate current state\r\n                    \r\n                    if (['+', '-', '*', '/'].some(symbol => currOutput.endsWith(symbol))) {\r\n                        currOutput = currOutput.slice(0,-1)\r\n                        \r\n                        this.setState (prevState => {\r\n                            return {\r\n                                currentInput: eval(currOutput),\r\n                                output: currOutput + input + eval(currOutput)\r\n                            }\r\n                        })\r\n                    }\r\n                    \r\n                }\r\n\r\n                else if (this.state.output.includes('=')){\r\n                    this.setState (prevState => {\r\n                        return {\r\n                            currentInput: prevState.currentInput,\r\n                            output: prevState.output\r\n                        }\r\n                    })\r\n                } else if (this.state.output === '') {\r\n\r\n                    this.setState ({currentInput: 'NaN', output: 'NaN'})\r\n\r\n                } else if (this.state.output === \"NaN\") {\r\n\r\n\r\n                } else {\r\n                    this.setState (prevState => {        \r\n                        return {\r\n                            currentInput: eval(prevState.output),\r\n                            output: prevState.output + input + eval(prevState.output)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calc-container\">\r\n                <div id=\"display-container\">\r\n                    <div id=\"outputDisplay\">{this.state.output}</div>\r\n                    <div id=\"display\">{this.state.currentInput}</div>\r\n                </div>\r\n                <div id=\"inputs\">\r\n                    {this.state.inputs.map(({id, value}) => {\r\n                        return (\r\n                            <button key={id} id={id} value={value} onClick={this.handleInput}>{value}</button>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <div id=\"info\"><p>Copyright &copy; 2020 Created by V.S</p></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator"],"sourceRoot":""}